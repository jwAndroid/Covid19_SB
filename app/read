https://mrgamza.tistory.com/639
>> http사용시 주의점과 해결법

    //https://developer.android.com/topic/performance/threads?hl=ko
    //참고하고 , 스레딩을 통한 성능개선 공부하고 바로 적용할것.  FetchWorldData() << 이친구를 개선해야함.

    //넘버포멧 익셉션 >> 공백제거 해보세요.
    //실제 숫자 스트링이 넘어갔다해도 앞뒤 공백이 끼게 되면 paseInt 할때 숫자형식예외가 발생하게 됩니다.
    //String number = request.getParameter("num").trim();



-------------------------------------

프래그먼트에서 getContext 주의 0126
http://blog.naver.com/PostView.nhn?blogId=zion830&logNo=221248961771

------------------------------------

프래그먼트 중복클릭문제 해결 0127
=> replace 에서 add로 변경

시도별  요청변수 참고사항

"생성일? : "+ model.getCreateDt());

("사망자수? : "+ model.getDeathCnt());
("확진자수? : "+ model.getDefCnt());
("지역? : "+  model.getGubun());
("전일대비 증감수? : "+ model.getIncDec());
("격리해제 수? : "+ model.getIsolClearCnt());
("격리중 환자 수? : "+model.getIsolIngCnt());
("지역발생 수? : "+ model.getLocalOccCnt());
("해외유입 수? : "+ model.getLocalOccCnt());
("리스트의 사이즈는?" +  list.size());

--------------------------------------------------------
1/30

//        최대값 최소값을 구할 int배열
//        int array[] = {4,3,2,1,10,8,7,6,9,5};
//        int max = array[0]; //최대값
//        int min = array[0]; //최소값
//
//        Arrays.sort(array); // 배열 정렬
//
////        최소값(Min) 출력
//        System.out.println("최소값은 : "+array[0]);
//
////        최대값(Max) 출력
//        System.out.println("최대값은 : " +array[array.length - 1]);

--------------------------------------------------------
1/31
서비스키 : 재발행 :
1월30일자 데이터누락
30일 빼고 다나옴
-->31일 나옴

전 인증키 : ZjfKLXS1wcLcMukB644KxevpbK8wDs7iMZSMEJRsInFQkFZXGhFVVOZJAIymLJKFGi493PtSLb1SNs3Oox87zQ%3D%3D
변경된 인증키 : C7ZuJxEr34SgLgOvDZiAjQc5lfye4XvA%2F8P4Ea3z0X7YY0ka2rXgahWyitsngBhkY5bXfvasjkwu%2BiKl%2FfVsQQ%3D%3D

-----------------------------------------------------------------

        //어싱크 테스크 : Deprecated 21년도 --대신--> ThreadTask 로 대체
        // --  > https://calvinjmkim.tistory.com/35
//        MyAsyncTask myAsyncTask = new MyAsyncTask();
//        myAsyncTask.execute();

-------------------------------------------------------------------
//        String[] x = {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17"};
//        for (int i = 0 ; i <  planets.length; i++){
//            addItem(planets[i] , x[i]);
//            System.out.println("테스트값: " + planets2[i]);
//            //TODO : 지금은 1로 고정인데
//            // sidoCnt의 값은 먼저 홈 프레그먼트쪽에서 json을 풀어준뒤 , 지역의 특정값을 따로따로 받아서 이값을 배열로 묶어서 똑같이 뿌려주기.
//            // 그냥 , 리스트데이터 얻고 넣어주면 끝인데 , 이 리스트의 인덱스(지역)에 주의해서 넣어준다.
//        }

-------------------------------------------------------------
02 10

//        ACTION_SETTINGS : 기본 설정 화면
//        ACTION_ACCESSIBILITY_SETTINGS : 접근성 설정 화면
//        ACTION_AIRPLANE_MODE_SETTINGS : 비행기 모드 설정 화면
//        ACTION_APPLICATION_SETTINGS : 앱 관련 설정 화면
//        ACTION_BLUETOOTH_SETTINGS : 블루투스 설정 화면
//        ACTION_DATE_SETTINGS : 날짜 및 시간 설정 화면
//        ACTION_DISPLAY_SETTINGS : 디스플레이 설정 화면
//        ACTION_FINGERPRINT_ENROLL : 지문 등록 설정 화면
//        ACTION_INTERNAL_STORAGE_SETTINGS : 내부 저장소 설정 화면
//        ACTION_SOUND_SETTINGS : 사운드 및 볼륨 설정 화면
//        ACTION_WIFI_SETTINGS : 와이파이 설정 화면

-------------------------------------------------------------

//        switch(errorCode) {
//            case ERROR_AUTHENTICATION: break;               // 서버에서 사용자 인증 실패
//            case ERROR_BAD_URL: break;                           // 잘못된 URL
//            case ERROR_CONNECT: break;                          // 서버로 연결 실패
//            case ERROR_FAILED_SSL_HANDSHAKE: break;    // SSL handshake 수행 실패
//            case ERROR_FILE: break;                                  // 일반 파일 오류
//            case ERROR_FILE_NOT_FOUND: break;               // 파일을 찾을 수 없습니다
//            case ERROR_HOST_LOOKUP: break;           // 서버 또는 프록시 호스트 이름 조회 실패
//            case ERROR_IO: break;                              // 서버에서 읽거나 서버로 쓰기 실패
//            case ERROR_PROXY_AUTHENTICATION: break;   // 프록시에서 사용자 인증 실패
//            case ERROR_REDIRECT_LOOP: break;               // 너무 많은 리디렉션
//            case ERROR_TIMEOUT: break;                          // 연결 시간 초과
//            case ERROR_TOO_MANY_REQUESTS: break;     // 페이지 로드중 너무 많은 요청 발생
//            case ERROR_UNKNOWN: break;                        // 일반 오류
//            case ERROR_UNSUPPORTED_AUTH_SCHEME: break; // 지원되지 않는 인증 체계
//            case ERROR_UNSUPPORTED_SCHEME: break;          // URI가 지원되지 않는 방식
//        }



-----------------------------------
//////////////2021 - 02 - 11 프로젝트 완료/////////////////
    1.FCM
    FCM이란 무엇인가?
    FCM은 Firebase Cloud Messaging의 약자로,
    무료로 메시지를 안정적으로 전송할 수 있는 교차 플랫폼 메시징 솔루션이다.
    모든 사용자에게 알림 메세지를 전송할 수도 있고, 그룹을 지어 메시지를 전송할 수도 있다.
    Friebase의 서비스는 요금 정책에 따라, 이용할 수 있는 범위가 다르지만
    FCM은 요금 정책에 구분 없이 무료로 사용하는 것이 가능하다.

TODO 1.
    공지사항쪽 필요한거 구현(ex 알림표시 , chat프로젝트 강의보면 참고가능.)

TODO 2.
    깃허브repo에 등록.

-----------------------------------
    private void uriBuilder(){
                Uri.Builder uri = new Uri.Builder()
                .scheme("https")
                .authority("openapi.naver.com")
                .appendPath("v1")
                .appendPath("search")
                .appendPath("news")
                .appendQueryParameter("query" , "")
                .appendQueryParameter("display" , "5")
                .appendQueryParameter("start" , "1")
                .appendQueryParameter("sort" , "sim");
        String url = uri.build().toString();
//        System.out.println("빌더를 사용한 url : " +url );
    }